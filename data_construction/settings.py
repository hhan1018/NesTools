# Fill in your api key and base url

my_api_key = "..."

my_base_url = "..."


# The ICL examples are just for reference and can be modified or replaced to suit your needs.

ICL_example_tool_instance = [
    'Domain: Film recommendation\n\n```python\ndef search_film_title(title: str, year: int):\n    """Search for related information about a specific film.\n\n    required parameters:\n        title (str): the title of the film\n    \n    optional parameters:\n        year (int): the release year of the film\n\n    Returns:\n        genre (str): the genre of the film\n        director (str): the director of the film\n        rating (float): average rating for the film, on a scale of 1 to 5\n        box_office (float): the premiere box office of the film, default unit: dollar\n    """\n    ...\n\ndef get_director_info(director: str):\n    """Retrieve information about a film director.\n\n    required parameters:\n        director (str): the name of the director\n\n    Returns:\n        birth_date (str): birth date of the director in the format \'yyyy-mm-dd\'\n        films (str): list of films directed by the director\n        awards (list): list of awards won by the director\n    """\n    ...\n\ndef genre_list(genre: str, feedback_consideration: bool):\n    """Recommend a list of films that fall into the genre.\n\n    required parameters:\n        genre (str): the genre of the films to be recommended\n        \n    optional parameters:\n        feedback_consideration (bool): whether to consider the feedback of the film or not\n\n    Returns:\n        recommended_films (list): list of recommended films in the genre\n    """\n    ...\n\ndef main():\n\n    data0, data1, data2, data3 = search_film_title("The Godfather", year=1972)\n    data4, data5, data6 = get_director_info(data1)\n    data7 = genre_list(data0)\n\n    # Please help search information about the film "The Godfather" released in 1972. Then, retrieve details about this film\'s director. Finally, recommend more films of the same genre as "The Godfather".\n\nif __name__ == "__main__":\n    main()\n```\n\n',
    'Domain: Literary error correction\n\n```python\ndef get_article_draft(author: str, note: str, writing_date: str):\n    """Retrieve information about the article draft written by an author.\n\n    required parameters:\n        author (str): the name of the author\n        note (str): the note of the article draft\n    \n    optional parameters:\n        writing_date (str): the date when the draft was written in \'yyyy-mm-dd\' format\n\n    Returns:\n        article_draft_link (str): the link to the article draft\n    """\n    ...\n\ndef correct_language_error(text_link: str, software: str):\n    """Correct the text for language and grammatical errors using the software.\n\n    required parameters:\n        text_link (str): the link of the text to be corrected\n        software (str): the name of the preferred error correction software, such as "NOUNPLUS"\n\n    Returns:\n        error_cause (dict): a dictionary containing errors and error causes, with the found error as the key and the corresponding error cause as the value\n        corrected_text (str): the complete content of the text after corrections\n    """\n    ...\n\ndef share_on_platform(content: str, platform: str, allow_comment: bool):\n    """Share the content on a specified platform.\n\n    required parameters:\n        content (str): the content to be shared\n        platform (str): the platform where the content will be shared, such as "LinkedIn" or "Medium"\n    \n    optional parameters: \n        allow_comment (bool): a flag indicating whether to allow comments\n\n    Returns:\n        share_status (bool): a flag indicating whether the content is shared successfully\n    """\n    ...\n\ndef main():\n\n    data0 = get_article_draft("John Doe", "First draft on environmental policy", writing_date="2023-11-20")\n    data1, data2 = correct_language_error(data0, "Grammarly")\n    data3 = share_on_platform(data2, "Medium", allow_comment=True)\n\n    # Please help me obtain the article draft for John Doe\'s article written on November 20, 2023 with the note of "First draft on environmental policy". Then, correct any language errors for the article draft using Grammarly software. Finally, share the corrected content on Medium with comments enabled.\n\nif __name__ == "__main__":\n    main()\n```\n\n',
]

ICL_example_query_norm = 'APIs:\n[{"api_name": "identify_high_risk_patients", "api_description": "Identify high-risk patients based on their medical data.", "parameters": {"patient_data": {"type": "dict", "description": "a dictionary containing patient ID as key and risk score as value"}}, "responses": {"high_risk_patients": {"type": "list", "description": "a list of high-risk patient IDs"}}}, {"api_name": "notify_physicians", "api_description": "Notify the primary care physicians about the high-risk patients.", "parameters": {"high_risk_patients": {"type": "list", "description": "a list of high-risk patient IDs"}}, "responses": {"status": {"type": "bool", "description": "the status of the notification, True if successfully notified, otherwise False"}}}]\n\nTask:Please help me process the patient data to identify high-risk patients,then notify the primary care physicians about the high-risk patients.\n\nAPI call result:\n[{"api_name": "identify_high_risk_patients", "parameters": {"patient_data": {"P001": 85, "P002": 72, "P003": 94, "P004": 68, "P005": 78}}, "responses": ["API_call_0"]}, {"api_name": "notify_physicians", "parameters": {"high_risk_patients": "API_call_0"}, "responses": ["API_call_1"]}]\n\nrewritten task:\nPlease help me process the patient data to distinguish the high-risk patients. The patient data includes patient IDs "P001" with a risk score of 85, "P002" with a risk score of 72, "P003" with a risk score of 94, "P004" with a risk score of 68, and "P005" with a risk score of 78. Then inform their physicians of the high-risk patient list.'

ICL_example_query_refine = 'APIs:\n[{"api_name": "get_most_crowded_area", "api_description": "Get the area with the highest foot traffic in a specified location.", "parameters": {"location": {"type": "str", "description": "the specified location to check for the most crowded area"}, "time_frame": {"type": "str", "description": "the time frame to consider for foot traffic analysis, e.g., \'this year\', \'this month\', \'this week\', \'today\'"}, "include_historical_data": {"type": "bool", "description": "whether to include historical foot traffic data for comparison"}}, "required": ["location", "time_frame"], "responses": {"crowded_area": {"type": "str", "description": "the name of the area with the highest foot traffic"}, "crowd_density": {"type": "int", "description": "the estimated number of people per square meter in the most crowded area"}, "peak_hours": {"type": "list", "description": "a list of peak hours during which the area experiences the highest foot traffic"}}}, {"api_name": "get_available_routes", "api_description": "Get the available routes to reach a specified destination.", "parameters": {"destination": {"type": "str", "description": "the destination to which routes are needed"}}, "required": ["destination"], "responses": {"routes": {"type": "list", "description": "a list of available routes to the destination"}}}, {"api_name": "book_sightseeing_tour", "api_description": "Book a sightseeing tour by vehicle in a specified area.", "parameters": {"area": {"type": "str", "description": "the area where the sightseeing tour will take place"}, "date": {"type": "str", "description": "the date for the sightseeing tour in YYYY-MM-DD format"}, "time": {"type": "str", "description": "the time for the sightseeing tour in HH:MM format"}}, "required": ["area", "date", "time"], "responses": {"booking_id": {"type": "str", "description": "a unique booking ID for the reservation"}, "booking_confirmation": {"type": "str", "description": "confirmation details of the booked sightseeing tour"}}}]\n\nTask: \nPlease get the most crowded area in Paris today. Get the available routes to that area. Finally book a sightseeing tour there for 2:00 PM on 2024-5-15.\n\nAPI call result:\n[{"api_name": "get_most_crowded_area", "parameters": {"location": "Paris", "time_frame": "today"}, "responses": ["API_call_0", "API_call_1", "API_call_2"]}, {"api_name": "get_available_routes", "parameters": {"destination": "API_call_0"}, "responses": ["API_call_3"]}, {"api_name": "book_sightseeing_tour", "parameters": {"area": "API_call_0", "date": "2024-5-15", "time": "14:00"}, "responses": ["API_call_4", "API_call_5"]}]\n\nrewritten task:\nI\'m curious about which part of Paris has the highest foot traffic today. How many routes can be taken to arrive at that location? Don\'t forget to reserve a sightseeing tour for me in that location for 2:00 PM on May 15, 2024.'

for example in ICL_example_tool_instance:
    tool_instance_prompt = (
        'Please generate several realistic functions with definitions in the given specific domain and generate complete function calling statements in `main()`, shaped like "data0,data1 = func0(*args)" , "data2,data3,data4 = func1(*args)",etc.Do not add any additional python code in `main()`.\nThe most important thing is that the former function\'s return value should be latter ones\' input argument, in other words, data1, data2, etc. should work as the arguments of subsequent function calls.In this scenario, the subsequent function will use a return value of a preceding function as its parameter, you need to ensure that the inner meaning of this parameter in both functions should be consistent, with identical parameter type, while slight difference in parameter names and descriptions are acceptable.\nAll required parameters must be filled in, by directly writing the actual values in order. Optional parameters can be filled in or not filled in, but remember to add "parameter_name=" before the value of the optional parameter if you are sure to fill in this optional parameter.\nYou need to write the task in natural language as a comment under the function calling statements in `main()` to describe the entire calling process. Please ensure that it includes all the function calling values.\nDon\'t use python\'s intrinsic functions in your generation, such as lists and dictionaries (index access, slicing, adding, deleting, etc.). \nThe generated API only needs to be related to the given domain and does not need to be completely subordinate to the given domain.\n\nHere are some examples.\n\n'
        + example
        + "It's your turn to generate. \n\nDomain: {}\n\nAnswer: __\n"
    )

query_norm_prompt = (
    "Below are some APIs, a task, and API call result for this task. You need to check if any values of the API call result that are not present in the task, incorporate those values into the original task without mentioning the specific APIs, rewrite the original task to ensure that it includes all the values,which is very important.If the value is in the format of complex data type (such as a dictionary, list, tuple, etc.), you need to incorporate each item from the value into the task in natural language, rather than directly adding the value in the raw format to the task.\nThe instructions of the rewritten task do not need to be completely consistent with the information in the given API such as the name and despcription, and some uniqueness of the real-life scenario should be retained.\nYou only need to generate the rewritten task without adding any additional explanations.\n\nHere is an example.\n\n"
    + ICL_example_query_norm
    + "\n\nIt's your turn to generate.\n\n"
)

query_refine_prompt = (
    'You are an excellent task rewriter. Next, I will give you a task query, and ask you to rewrite it in high quality. Please follow the tips below.\nTips:\n1. Please make sure that the actual name of the API(e.g., get_article_headline) involved in the call does not appear in the rewritten task.\n2. The API call result represents the golden tool calling process corresponding to the query. Parameter value in the "API_call_" format represents a return value from a previous tool. Refer to the provided APIs information to ensure that the rewritten task is consistent with the golden tool calling process.\n3. Please make sure that all regular parameters in the gold tool calling process, which are not in the "API_call_" format, can be extracted or inferred from the rewritten task.\n4. Without changing the core meaning and logic of the original task, and while adhering to the call chain, appropriately modify the form of expression, make the task more coherent and aligned with real-world scenarios. \n\nHere\'s an example:\n'
    + ICL_example_query_refine
    + "\n\nIt's your turn to generate.\n\n"
)
